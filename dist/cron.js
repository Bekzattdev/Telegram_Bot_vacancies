"use strict";
// import cron from "node-cron";
// import { sendToChannel } from "./bot";
// import { fetchDevKgVacancies } from "./parsers/devs";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startCron = startCron;
// let lastSentLinks: string[] = [];
// export function startCron() {
//   cron.schedule("*/10 * * * *", async () => {
//     console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ DevKG...");
//     const vacancies = await fetchDevKgVacancies();
//     for (const vacancy of vacancies) {
//       if (!lastSentLinks.includes(vacancy.link)) {
//         const message = `<b>${vacancy.title}</b>\n${vacancy.company}\n<a href="${vacancy.link}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>`;
//         await sendToChannel(message);
//         lastSentLinks.push(vacancy.link);
//       }
//     }
//     if (lastSentLinks.length > 100) lastSentLinks = lastSentLinks.slice(-50);
//   });
//   console.log("–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!");
// }
const node_cron_1 = __importDefault(require("node-cron"));
const bot_1 = require("./bot");
const devs_1 = require("./parsers/devs");
let lastSentLinks = [];
function startCron() {
    node_cron_1.default.schedule("*/10 * * * *", async () => {
        console.log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π DevKG...");
        const vacancies = await (0, devs_1.fetchDevKgVacancies)();
        console.log(`üß© –ù–∞–π–¥–µ–Ω–æ ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
        for (const vacancy of vacancies) {
            console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º:", vacancy.title);
            if (!lastSentLinks.includes(vacancy.link)) {
                console.log("üü¢ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è:", vacancy.title);
                try {
                    const message = `<b>${vacancy.title}</b>\n${vacancy.company}\n<a href="${vacancy.link}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>`;
                    await (0, bot_1.sendToChannel)(message);
                    console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", vacancy.title);
                }
                catch (err) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", err);
                }
                lastSentLinks.push(vacancy.link);
            }
        }
    });
}
//# sourceMappingURL=cron.js.map